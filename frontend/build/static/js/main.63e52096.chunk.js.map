{"version":3,"sources":["components/rectangle.js","components/graph.js","utils/gendata.js","App.js","index.js"],"names":["Rectangle","callBack","rectDimension","separator","column","row","colorToggle","onClick","fill","x","y","height","width","Graph","useState","c","r","returnArray","i","rowArray","j","push","genData","data","setData","handleClick","tempArray","xmlns","viewBox","map","rowIndex","colIndex","App","path","ReactDOM","render","document","getElementById"],"mappings":"wLAEe,SAASA,EAAT,GAAsF,IAAjEC,EAAgE,EAAhEA,SAAUC,EAAsD,EAAtDA,cAAeC,EAAuC,EAAvCA,UAAWC,EAA4B,EAA5BA,OAAQC,EAAoB,EAApBA,IAAKC,EAAe,EAAfA,YAMjF,OACE,sBACEC,QANW,WACbN,EAAS,CAACI,EAAKD,KAMbI,KAAMF,EAAc,QAAU,QAC9BG,GAAIP,EAAgBC,GAAaC,EACjCM,GAAIR,EAAgBC,GAAaE,EACjCM,OAAQT,EACRU,MAAOV,ICXA,SAASW,IAEtB,IAF8B,EAWNC,mBCf1B,SAAiBC,EAAGC,GAGhB,IAFA,IAAMC,EAAc,GAEXC,EAAI,EAAGA,EAAIF,EAAGE,IAAK,CAExB,IADA,IAAMC,EAAW,GACRC,EAAI,EAAGA,EAAIL,EAAGK,IACvBD,EAASE,MAAK,GAEdJ,EAAYI,KAAKF,GAGrB,OAAOF,EDIwBK,CATjB,GACH,KAHiB,mBAWvBC,EAXuB,KAWjBC,EAXiB,KAa9B,SAASC,EAAaR,GACpB,IAAMS,EAAYH,EAClBG,EAAUT,EAAY,IAAIA,EAAY,KAAQM,EAAKN,EAAY,IAAIA,EAAY,IAC/EO,EAAQ,YAAIE,IAGd,OACE,qBAAKC,MAAM,6BAA6BC,QAAO,cAfnC,GAemC,YAdlC,KAcb,SACKL,EAAKM,KAAI,SAACxB,EAAKyB,GACd,OAAOzB,EAAIwB,KAAI,SAACzB,EAAQ2B,GACtB,OACE,cAAC/B,EAAD,CAEEC,SAAUwB,EACVvB,cAnBQ,EAoBRC,UAnBID,GAoBJE,OAAQ2B,EACR1B,IAAKyB,EACLxB,YAAaF,GAPf,UACUC,EADV,YACiBD,Y,mBEpBhB,SAAS4B,IACtB,OACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOC,KAAK,IAAZ,SACE,cAACpB,EAAD,UCRVqB,IAASC,OACP,cAACH,EAAD,IACAI,SAASC,eAAe,W","file":"static/js/main.63e52096.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nexport default function Rectangle({ callBack, rectDimension, separator, column, row, colorToggle }) {\n  \n    const trigger =() => {\n      callBack([row, column]);\n    }\n  \n    return (\n      <rect\n        onClick={trigger}\n        fill={colorToggle ? \"black\" : \"white\"}\n        x={(rectDimension + separator) * column}\n        y={(rectDimension + separator) * row}\n        height={rectDimension}\n        width={rectDimension}\n      />\n    );\n  }","import React, { useState, useEffect } from \"react\";\nimport Rectangle from \"./rectangle.js\"\nimport { genData } from \"../utils/gendata.js\"\n\nexport default function Graph() {\n\n  const columns = 32;\n  const rows = 16;\n\n  const width = 80;\n  const height = 100;\n\n  const rectDimension = 1;\n  const separator = rectDimension / 10;\n\n  const [data, setData] = useState(genData(columns, rows))\n\n  function handleClick (returnArray) {\n    const tempArray = data;\n    tempArray[returnArray[0]][returnArray[1]] = !(data[returnArray[0]][returnArray[1]]);\n    setData([...tempArray]);\n  }\n\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox={`0 0 ${width} ${height}`}>\n        {data.map((row, rowIndex) => {\n          return row.map((column, colIndex) => {\n            return (\n              <Rectangle\n                key={`${row}.${column}`}\n                callBack={handleClick}\n                rectDimension={rectDimension}\n                separator={separator}\n                column={colIndex}\n                row={rowIndex}\n                colorToggle={column}\n              />\n            );\n          });\n        })}\n    </svg>\n  );\n}","function genData(c, r) {\n    const returnArray = [];\n\n    for (let i = 0; i < r; i++) {\n        const rowArray = [];\n        for (let j = 0; j < c; j++) {\n        rowArray.push(true);\n        }\n        returnArray.push(rowArray);\n    }\n\n    return returnArray;\n}\n\nexport { genData }\n","import React from \"react\";\nimport Graph from \"./components/graph.js\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\n\nexport default function App(){\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\">\n          <Graph />\n        </Route>\n      </Switch>\n    </Router>\n    \n  )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}